{
    "name": "ResponsiveDonation",
    "structs": {
        "ConditionalClauseStruct": [
            {
                "name": "clause_id",
                "type": "uint64"
            },
            {
                "name": "event_id",
                "type": "uint64"
            },
            {
                "name": "payout_amount",
                "type": "uint64"
            },
            {
                "name": "recipient_yes",
                "type": "address"
            },
            {
                "name": "recipient_no",
                "type": "address"
            },
            {
                "name": "donor_address",
                "type": "address"
            },
            {
                "name": "executed",
                "type": "bool"
            }
        ],
        "EventStruct": [
            {
                "name": "event_id",
                "type": "uint64"
            },
            {
                "name": "event_string",
                "type": "string"
            },
            {
                "name": "pending",
                "type": "bool"
            },
            {
                "name": "resolution",
                "type": "bool"
            },
            {
                "name": "oracle_address",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "create_event",
            "args": [
                {
                    "type": "string",
                    "name": "event_string",
                    "desc": "Description of the event (e.g., \"Hurricane hits Miami\")"
                },
                {
                    "type": "address",
                    "name": "oracle_address",
                    "desc": "Address authorized to resolve this event"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The event ID of the created event (uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new event that can be used for conditional donations.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "instantaneous_payout",
            "args": [
                {
                    "type": "address",
                    "name": "recipient_address",
                    "desc": "Address to receive the donation (charity/recipient)"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction (must be grouped with the app call)"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if the donation is successful"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Process an immediate donation with instant payout to recipient.\nPerfect for direct charitable giving with immediate impact.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_conditional_donation",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id",
                    "desc": "The event this donation depends on"
                },
                {
                    "type": "address",
                    "name": "recipient_yes",
                    "desc": "Address to receive funds if event resolves to true"
                },
                {
                    "type": "address",
                    "name": "recipient_no",
                    "desc": "Address to receive funds if event resolves to false (often donor)"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction (funds held in escrow)"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The clause ID of the created conditional donation"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a conditional donation that will pay out based on event resolution.\nExample: \"Donate $1000 to Red Cross IF hurricane hits Miami, otherwise return to me\"",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mixed_donation",
            "args": [
                {
                    "type": "address",
                    "name": "instant_recipient",
                    "desc": "Address to receive instant donation (use zero address if no instant donation)"
                },
                {
                    "type": "uint64",
                    "name": "instant_amount",
                    "desc": "Amount for instant donation (use 0 if no instant donation)"
                },
                {
                    "type": "uint64",
                    "name": "event_id",
                    "desc": "Event ID for conditional donation"
                },
                {
                    "type": "address",
                    "name": "recipient_yes",
                    "desc": "Address to receive funds if event resolves to true"
                },
                {
                    "type": "address",
                    "name": "recipient_no",
                    "desc": "Address to receive funds if event resolves to false"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering both donations"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The clause ID for the conditional donation created"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create both instantaneous and conditional donations in a single transaction.\nSimplified version that handles one conditional donation to keep it simple.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resolve_event",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id",
                    "desc": "The event to resolve"
                },
                {
                    "type": "bool",
                    "name": "resolution",
                    "desc": "The outcome of the event (true/false)"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if the event is successfully resolved"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resolve an event outcome. Can only be called by the authorized oracle.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "execute_conditional_clause",
            "args": [
                {
                    "type": "uint64",
                    "name": "clause_id",
                    "desc": "The clause to execute"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if the clause is successfully executed"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Execute a conditional clause after its associated event has been resolved.\nCan be called by anyone to trigger payouts.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_event_info",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id",
                    "desc": "The event ID to query"
                }
            ],
            "returns": {
                "type": "(uint64,string,bool,bool,address)",
                "struct": "EventStruct",
                "desc": "The EventStruct containing the event's information"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get information about an event.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_clause_info",
            "args": [
                {
                    "type": "uint64",
                    "name": "clause_id",
                    "desc": "The clause ID to query"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,address,address,address,bool)",
                "struct": "ConditionalClauseStruct",
                "desc": "The ConditionalClauseStruct containing the clause's information"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get information about a conditional clause.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_pending_events",
            "args": [],
            "returns": {
                "type": "uint64[]",
                "desc": "Array of pending event IDs (empty for now - placeholder for interface)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get all pending event IDs. Oracle can use this to know which events to monitor.\nNote: This is a simplified version - in production you'd want pagination for large numbers of events.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_clauses_for_event",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id",
                    "desc": "The event to get clauses for"
                }
            ],
            "returns": {
                "type": "uint64[]",
                "desc": "Array of clause IDs that depend on this event (empty for now - placeholder)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get all clause IDs that depend on a specific event.\nOracle can call this when resolving an event to get all clauses to execute.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    ResponsiveDonation Contract - MVP Version\n    \n    A smart contract enabling conditional charitable donations based on real-world events.\n    Perfect for disaster relief, climate action, and cause-based giving.\n    \n    Core Features:\n    1. \ud83d\udcb0 Instantaneous Donations - Direct donations with immediate payout\n    2. \ud83c\udfaf Conditional Donations - \"Donate $1000 to Red Cross IF hurricane hits Miami\"\n    3. \ud83d\udd2e Oracle Resolution - Trusted oracles resolve event outcomes\n    4. \ud83d\ude80 Mixed Donations - Combine instant + conditional in one transaction\n    5. \ud83d\udcca Query Interface - Discover events and clauses\n    \n    Use Cases:\n    - Climate disaster relief (donate if hurricane/wildfire occurs)\n    - Charity matching (donate if fundraising goal is met)\n    - Sports betting for good (donate to charity if team wins)\n    - Political action (donate if legislation passes)\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listed_events": {
                    "keyType": "uint64",
                    "valueType": "EventStruct",
                    "prefix": "ZXZlbnRz"
                },
                "conditional_clauses": {
                    "keyType": "uint64",
                    "valueType": "ConditionalClauseStruct",
                    "prefix": "Y2xhdXNlcw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        772
                    ],
                    "errorMessage": "Associated event does not exist"
                },
                {
                    "pc": [
                        741,
                        871
                    ],
                    "errorMessage": "Clause does not exist"
                },
                {
                    "pc": [
                        761
                    ],
                    "errorMessage": "Clause has already been executed"
                },
                {
                    "pc": [
                        586
                    ],
                    "errorMessage": "Conditional amount must be greater than 0"
                },
                {
                    "pc": [
                        471,
                        621,
                        688,
                        856
                    ],
                    "errorMessage": "Event does not exist"
                },
                {
                    "pc": [
                        483,
                        633,
                        702
                    ],
                    "errorMessage": "Event has already been resolved"
                },
                {
                    "pc": [
                        786
                    ],
                    "errorMessage": "Event has not been resolved yet"
                },
                {
                    "pc": [
                        707,
                        762,
                        801,
                        839
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        443
                    ],
                    "errorMessage": "Minimum donation is 1000 microAlgos (0.001 ALGO)"
                },
                {
                    "pc": [
                        125,
                        137,
                        149,
                        168,
                        187,
                        211,
                        238,
                        279,
                        314,
                        348
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        711
                    ],
                    "errorMessage": "Only authorized oracle can resolve event"
                },
                {
                    "pc": [
                        437,
                        505,
                        571
                    ],
                    "errorMessage": "Payment amount must be greater than 0"
                },
                {
                    "pc": [
                        593
                    ],
                    "errorMessage": "Payment amount must equal sum of donations"
                },
                {
                    "pc": [
                        423,
                        491,
                        557
                    ],
                    "errorMessage": "Payment must be sent to contract"
                },
                {
                    "pc": [
                        431,
                        499,
                        565
                    ],
                    "errorMessage": "Payment sender must match transaction sender"
                },
                {
                    "pc": [
                        375
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        128,
                        140,
                        152,
                        171,
                        190,
                        214,
                        241,
                        282,
                        317,
                        351
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        747,
                        873
                    ],
                    "errorMessage": "check self.conditional_clauses entry exists"
                },
                {
                    "pc": [
                        473,
                        623,
                        691,
                        774,
                        858
                    ],
                    "errorMessage": "check self.listed_events entry exists"
                },
                {
                    "pc": [
                        266,
                        301,
                        330
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQBQUSYFAQAEFR98dQZldmVudHMHY2xhdXNlcwYVH3x1AAAxG0EBRIIKBJY+ku8EhI2+UgQSBtj9BKb+00QELbaZRgS1oWfKBLhOFdYEdl4PPwTIndkCBCwdbRc2GgCOCgDhAL8AnABzAFgAQAAtABoADgACI0MxGRREMRhEJwSwIkMxGRREMRhEJwSwIkMxGRREMRhENhoBiAK9KUxQsCJDMRkURDEYRDYaAYgCmylMULAiQzEZFEQxGEQ2GgGIAhQoI08CVClMULAiQzEZFEQxGEQ2GgE2GgKIAcUoI08CVClMULAiQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgUxFiIJSTgQIhJEiAEVKUxQsCJDMRkURDEYRDYaATYaAjYaAzEWIglJOBAiEkSIAJspTFCwIkMxGRREMRhENhoBMRYiCUk4ECISRIgATygjTwJUKUxQsCJDMRkURDEYRDYaATYaAogAESlMULAiQzEZQP8EMRgURCJDigIBMgcWSYACACtQgAGAUCUjVIv/UIv+UCpLAlBJvEhMv4mKAgGL/zgHMgoSRIv/OAAxABJEi/84CElESYHoBw9EsYv+sgeyCCKyECOyAbMiiYoEASqL/FBJvUUBRL5EJFMoI08CVCNTRIv/OAcyChJEi/84ADEAEkSL/zgISUQxAAEyB0xRAAgXCBZMFjEASwKL/FBPAlCL/VCL/lBMUChQK0sCUEy/iYoGAYv/OAcyChJEi/84ADEAEkSL/zgISUSL+xdJTgJKCRZJTgMXSURLAQhPAhJEQQAQsYv6sgeLALIIIrIQI7IBsyqL/FBJvUUBRL5EJFMoI08CVCNTRDEAATIHTFEACBcIIggWMQBLAYv8UIsBUIv9UIv+UExQKFArSwJQTL+MAImKAgEqi/5QSb1FAURJvkRJJFMoI08CVCNTRDEASwFXCyASRCQjVIv/I1MlTFRLAbxIvyKJigEBK4v/UEcCvUUBRL5MSU8CREmBwAdTKCNPAlQjUxREVwgIKkxQSb1FAUS+REkkUygjTwJUI1MURCVTKCNPAlQjU0EAJosBVxggsYsBSYEQW08CsgeyCCKyECOyAbOBwAciVIsATL8ijACJiwFXOCBC/9eKAQEqi/9QSb1FAUS+RImKAQEri/9QSb1FAUS+RIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}