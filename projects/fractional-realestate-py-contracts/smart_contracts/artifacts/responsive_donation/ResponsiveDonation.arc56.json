{
    "name": "ResponsiveDonation",
    "structs": {
        "ConditionalClauseStruct": [
            {
                "name": "clause_id",
                "type": "uint64"
            },
            {
                "name": "event_id",
                "type": "uint64"
            },
            {
                "name": "payout_amount",
                "type": "uint64"
            },
            {
                "name": "recipient_yes",
                "type": "address"
            },
            {
                "name": "recipient_no",
                "type": "address"
            },
            {
                "name": "donor_address",
                "type": "address"
            },
            {
                "name": "executed",
                "type": "bool"
            }
        ],
        "EventStruct": [
            {
                "name": "event_id",
                "type": "uint64"
            },
            {
                "name": "event_string",
                "type": "string"
            },
            {
                "name": "pending",
                "type": "bool"
            },
            {
                "name": "resolution",
                "type": "bool"
            },
            {
                "name": "oracle_address",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "create_event",
            "args": [
                {
                    "type": "string",
                    "name": "event_string",
                    "desc": "Description of the event (e.g., \"Hurricane hits Miami\")"
                },
                {
                    "type": "address",
                    "name": "oracle_address",
                    "desc": "Address authorized to resolve this event"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The event ID of the created event (uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new event that can be used for conditional donations.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "instantaneous_payout",
            "args": [
                {
                    "type": "address",
                    "name": "recipient_address",
                    "desc": "Address to receive the donation"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction (must be grouped with the app call)"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if the donation is successful"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Process an immediate donation with instant payout to recipient.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_conditional_donation",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id",
                    "desc": "The event this donation depends on"
                },
                {
                    "type": "address",
                    "name": "recipient_yes",
                    "desc": "Address to receive funds if event resolves to true"
                },
                {
                    "type": "address",
                    "name": "recipient_no",
                    "desc": "Address to receive funds if event resolves to false"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction (funds held in escrow)"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The clause ID of the created conditional donation"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a conditional donation that will pay out based on event resolution.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resolve_event",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id",
                    "desc": "The event to resolve"
                },
                {
                    "type": "bool",
                    "name": "resolution",
                    "desc": "The outcome of the event (true/false)"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if the event is successfully resolved"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resolve an event outcome. Can only be called by the authorized oracle.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "execute_conditional_clause",
            "args": [
                {
                    "type": "uint64",
                    "name": "clause_id",
                    "desc": "The clause to execute"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if the clause is successfully executed"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Execute a conditional clause after its associated event has been resolved.\nCan be called by anyone to trigger payouts.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_event_info",
            "args": [
                {
                    "type": "uint64",
                    "name": "event_id",
                    "desc": "The event ID to query"
                }
            ],
            "returns": {
                "type": "(uint64,string,bool,bool,address)",
                "struct": "EventStruct",
                "desc": "The EventStruct containing the event's information"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get information about an event.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_clause_info",
            "args": [
                {
                    "type": "uint64",
                    "name": "clause_id",
                    "desc": "The clause ID to query"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,address,address,address,bool)",
                "struct": "ConditionalClauseStruct",
                "desc": "The ConditionalClauseStruct containing the clause's information"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get information about a conditional clause.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    ResponsiveDonation Contract\n    \n    This smart contract supports:\n    1. Instantaneous donations to recipient addresses\n    2. Conditional donations that pay out based on external event resolution\n    3. Event creation and resolution by authorized oracles\n    \n    Key features:\n    - Direct donations with immediate payout\n    - Conditional donations held in escrow until event resolution\n    - Oracle-based event resolution system\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listed_events": {
                    "keyType": "uint64",
                    "valueType": "EventStruct",
                    "prefix": "ZXZlbnRz"
                },
                "conditional_clauses": {
                    "keyType": "uint64",
                    "valueType": "ConditionalClauseStruct",
                    "prefix": "Y2xhdXNlcw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        543
                    ],
                    "errorMessage": "Associated event does not exist"
                },
                {
                    "pc": [
                        512,
                        642
                    ],
                    "errorMessage": "Clause does not exist"
                },
                {
                    "pc": [
                        532
                    ],
                    "errorMessage": "Clause has already been executed"
                },
                {
                    "pc": [
                        372,
                        459,
                        627
                    ],
                    "errorMessage": "Event does not exist"
                },
                {
                    "pc": [
                        384,
                        473
                    ],
                    "errorMessage": "Event has already been resolved"
                },
                {
                    "pc": [
                        557
                    ],
                    "errorMessage": "Event has not been resolved yet"
                },
                {
                    "pc": [
                        478,
                        533,
                        572,
                        610
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        97,
                        116,
                        135,
                        159,
                        186,
                        221,
                        255
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        482
                    ],
                    "errorMessage": "Only authorized oracle can resolve event"
                },
                {
                    "pc": [
                        344,
                        406
                    ],
                    "errorMessage": "Payment amount must be greater than 0"
                },
                {
                    "pc": [
                        330,
                        392
                    ],
                    "errorMessage": "Payment must be sent to contract"
                },
                {
                    "pc": [
                        338,
                        400
                    ],
                    "errorMessage": "Payment sender must match transaction sender"
                },
                {
                    "pc": [
                        282
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        100,
                        119,
                        138,
                        162,
                        189,
                        224,
                        258
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        518,
                        644
                    ],
                    "errorMessage": "check self.conditional_clauses entry exists"
                },
                {
                    "pc": [
                        374,
                        462,
                        545,
                        629
                    ],
                    "errorMessage": "check self.listed_events entry exists"
                },
                {
                    "pc": [
                        208,
                        237
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAFQUSYEAQAEFR98dQZldmVudHMHY2xhdXNlczEbQQDuggcElj6S7wSEjb5SBBIG2P0ELbaZRgS1oWfKBLhOFdYEdl4PPzYaAI4HAKAAfgBbAEAAKAAVAAIiQzEZFEQxGEQ2GgGIAgwpTFCwI0MxGRREMRhENhoBiAHqKUxQsCNDMRkURDEYRDYaAYgBYygiTwJUKUxQsCNDMRkURDEYRDYaATYaAogBFCgiTwJUKUxQsCNDMRkURDEYRDYaATYaAjYaAzEWIwlJOBAjEkSIAJUpTFCwI0MxGRREMRhENhoBMRYjCUk4ECMSRIgATygiTwJUKUxQsCNDMRkURDEYRDYaATYaAogAESlMULAjQzEZQP9FMRgURCNDigIBMgcWSYACACtQgAGAUCUiVIv/UIv+UCpLAlBJvEhMv4mKAgGL/zgHMgoSRIv/OAAxABJEi/84CElEsYv+sgeyCCOyECKyAbMjiYoEASqL/FBJvUUBRL5EJFMoIk8CVCJTRIv/OAcyChJEi/84ADEAEkSL/zgISUQxAAEyB0xRAAgXCBZMFjEASwKL/FBPAlCL/VCL/lBMUChQK0sCUEy/iYoCASqL/lBJvUUBREm+REkkUygiTwJUIlNEMQBLAVcLIBJEJCJUi/8iUyVMVEsBvEi/I4mKAQEri/9QRwK9RQFEvkxJTwJESYHAB1MoIk8CVCJTFERXCAgqTFBJvUUBRL5ESSRTKCJPAlQiUxREJVMoIk8CVCJTQQAmiwFXGCCxiwFJgRBbTwKyB7III7IQIrIBs4HAByNUiwBMvyOMAImLAVc4IEL/14oBASqL/1BJvUUBRL5EiYoBASuL/1BJvUUBRL5EiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}