{
  "version": 3,
  "sources": [
    "../../responsive_donation/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AA6OK;;AAAA;AAAA;AAAA;;AAAA;AA7OL;;;AA6OK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA5NL;;;AA4NK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AA3KL;;;AA2KK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAzIL;;;AAAA;;;AAyIK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/CA;;AAAA;AAAA;AAAA;;AAAA;AA1FL;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0FK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AA5DL;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4DK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AA9BL;;;AAAA;;;AA8BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BL;;AAAA;;;;;;;;;AA8BA;;;AAiB+B;;AAAZ;AAGoB;AAAA;;;;AAAA;AAGnB;;;AAHmB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA/B;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAQA;AAER;;;AAiBe;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAP;AAAA;AAGA;;;;;;;AAAA;;;AAGQ;;;AAHR;AAMO;AAAP;AAER;;;AAqB2B;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACe;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;AAGO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAP;AAAA;AAGwB;;AAAV;AACU;;AAAkC;AAAA;;;AAAR;AAA1B;AAAZ;AAMM;AAAA;AAGa;;AANO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOzB;AAPyB;AAAtC;AAAA;;AAAA;AAAA;AAAA;AAUA;AAER;;;AAiB2B;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEe;AAAA;AAAA;AAGR;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;AAGO;;AAAc;;AAAA;;;AAAd;AAAP;AAGA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;AAAA;AAEO;AAAP;AAER;;;AAgB4B;AAAb;;AAAA;AAAA;;AAAA;AAAA;;AAAP;AAEgB;AAAA;AAAA;AAAA;;AAAA;AAGL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AAGO;;;AAA0B;AAA1B;AAAA;AAAA;AAAA;AAAA;;AAAP;AACe;AAAA;AAGJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AAGG;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAX;;;AACwB;;AAAA;;;AAKhB;AACW;;AAAA;AAAA;;AAAA;;;;;;;AADX;;;AAGQ;;;AAHR;AAOA;;;AAAA;AAAA;AACA;;AAAA;AAAA;AAEO;AAAP;;AAAA;AAbgB;;AAAA;;;;;;AAexB;;;AAc2B;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAP;AAER;;;AAc4B;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 80 81"
    },
    "7": {
      "op": "bytecblock 0x00 0x151f7c75 \"events\" \"clauses\""
    },
    "31": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "33": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "36": {
      "op": "pushbytess 0x963e92ef 0x848dbe52 0x1206d8fd 0x2db69946 0xb5a167ca 0xb84e15d6 0x765e0f3f // method \"create_event(string,address)uint64\", method \"instantaneous_payout(address,pay)bool\", method \"create_conditional_donation(uint64,address,address,pay)uint64\", method \"resolve_event(uint64,bool)bool\", method \"execute_conditional_clause(uint64)bool\", method \"get_event_info(uint64)(uint64,string,bool,bool,address)\", method \"get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool)\"",
      "defined_out": [
        "Method(create_conditional_donation(uint64,address,address,pay)uint64)",
        "Method(create_event(string,address)uint64)",
        "Method(execute_conditional_clause(uint64)bool)",
        "Method(get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool))",
        "Method(get_event_info(uint64)(uint64,string,bool,bool,address))",
        "Method(instantaneous_payout(address,pay)bool)",
        "Method(resolve_event(uint64,bool)bool)"
      ],
      "stack_out": [
        "Method(create_event(string,address)uint64)",
        "Method(instantaneous_payout(address,pay)bool)",
        "Method(create_conditional_donation(uint64,address,address,pay)uint64)",
        "Method(resolve_event(uint64,bool)bool)",
        "Method(execute_conditional_clause(uint64)bool)",
        "Method(get_event_info(uint64)(uint64,string,bool,bool,address))",
        "Method(get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool))"
      ]
    },
    "73": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_conditional_donation(uint64,address,address,pay)uint64)",
        "Method(create_event(string,address)uint64)",
        "Method(execute_conditional_clause(uint64)bool)",
        "Method(get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool))",
        "Method(get_event_info(uint64)(uint64,string,bool,bool,address))",
        "Method(instantaneous_payout(address,pay)bool)",
        "Method(resolve_event(uint64,bool)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_event(string,address)uint64)",
        "Method(instantaneous_payout(address,pay)bool)",
        "Method(create_conditional_donation(uint64,address,address,pay)uint64)",
        "Method(resolve_event(uint64,bool)bool)",
        "Method(execute_conditional_clause(uint64)bool)",
        "Method(get_event_info(uint64)(uint64,string,bool,bool,address))",
        "Method(get_clause_info(uint64)(uint64,uint64,uint64,address,address,address,bool))",
        "tmp%2#0"
      ]
    },
    "76": {
      "op": "match main_create_event_route@5 main_instantaneous_payout_route@6 main_create_conditional_donation_route@7 main_resolve_event_route@8 main_execute_conditional_clause_route@9 main_get_event_info_route@10 main_get_clause_info_route@11",
      "stack_out": []
    },
    "92": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "93": {
      "op": "return",
      "stack_out": []
    },
    "94": {
      "block": "main_get_clause_info_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "96": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "97": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "98": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "100": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "101": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "104": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_clause_info",
      "op": "callsub get_clause_info",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "107": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "0x151f7c75"
      ]
    },
    "108": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%43#0"
      ]
    },
    "109": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "110": {
      "op": "log",
      "stack_out": []
    },
    "111": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "112": {
      "op": "return",
      "stack_out": []
    },
    "113": {
      "block": "main_get_event_info_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "115": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "116": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "117": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "119": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "120": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "123": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_event_info",
      "op": "callsub get_event_info",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "126": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "0x151f7c75"
      ]
    },
    "127": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%37#0"
      ]
    },
    "128": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "129": {
      "op": "log",
      "stack_out": []
    },
    "130": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "131": {
      "op": "return",
      "stack_out": []
    },
    "132": {
      "block": "main_execute_conditional_clause_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "134": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "135": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "136": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "138": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "139": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "142": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.execute_conditional_clause",
      "op": "callsub execute_conditional_clause",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "145": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "146": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "147": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "149": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "150": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "151": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "152": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "153": {
      "op": "log",
      "stack_out": []
    },
    "154": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "155": {
      "op": "return",
      "stack_out": []
    },
    "156": {
      "block": "main_resolve_event_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "158": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "159": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "160": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "162": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "163": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "166": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "169": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.resolve_event",
      "op": "callsub resolve_event",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "172": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "173": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "174": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "176": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "177": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "178": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "179": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "180": {
      "op": "log",
      "stack_out": []
    },
    "181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "182": {
      "op": "return",
      "stack_out": []
    },
    "183": {
      "block": "main_create_conditional_donation_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "185": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "186": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "187": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "189": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "190": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "193": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "196": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "199": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%20#0"
      ]
    },
    "201": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%20#0",
        "1"
      ]
    },
    "202": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0"
      ]
    },
    "203": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "204": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "206": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "207": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "208": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "gtxn_idx%1#0"
      ]
    },
    "209": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.create_conditional_donation",
      "op": "callsub create_conditional_donation",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "212": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "213": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "214": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "215": {
      "op": "log",
      "stack_out": []
    },
    "216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "217": {
      "op": "return",
      "stack_out": []
    },
    "218": {
      "block": "main_instantaneous_payout_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "220": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "221": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "222": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "224": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "225": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "228": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%14#0"
      ]
    },
    "230": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%14#0",
        "1"
      ]
    },
    "231": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "232": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "233": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "235": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "236": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "237": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "238": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.instantaneous_payout",
      "op": "callsub instantaneous_payout",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "241": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "242": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "243": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "245": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "246": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "247": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "249": {
      "op": "log",
      "stack_out": []
    },
    "250": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "251": {
      "op": "return",
      "stack_out": []
    },
    "252": {
      "block": "main_create_event_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "254": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "255": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "256": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "258": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "259": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "262": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "265": {
      "callsub": "smart_contracts.responsive_donation.contract.ResponsiveDonation.create_event",
      "op": "callsub create_event",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "268": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "269": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "270": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "271": {
      "op": "log",
      "stack_out": []
    },
    "272": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "273": {
      "op": "return",
      "stack_out": []
    },
    "274": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "276": {
      "op": "bnz main_after_if_else@14",
      "stack_out": []
    },
    "279": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "281": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "282": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "283": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "284": {
      "op": "return",
      "stack_out": []
    },
    "285": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.create_event",
      "params": {
        "event_string#0": "bytes",
        "oracle_address#0": "bytes"
      },
      "block": "create_event",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "288": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "290": {
      "op": "itob",
      "defined_out": [
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0"
      ]
    },
    "291": {
      "op": "dup",
      "defined_out": [
        "event_id#0",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "event_id#0",
        "event_id#0 (copy)"
      ]
    },
    "292": {
      "op": "pushbytes 0x002b",
      "defined_out": [
        "0x002b",
        "event_id#0",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "event_id#0",
        "event_id#0 (copy)",
        "0x002b"
      ]
    },
    "296": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "297": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%2#0",
        "0x80"
      ]
    },
    "300": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "301": {
      "op": "intc_3 // 81",
      "defined_out": [
        "81",
        "encoded_tuple_buffer%3#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%3#0",
        "81"
      ]
    },
    "302": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "81",
        "encoded_tuple_buffer%3#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%3#0",
        "81",
        "0"
      ]
    },
    "303": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "304": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "event_id#0",
        "oracle_address#0 (copy)"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%4#0",
        "oracle_address#0 (copy)"
      ]
    },
    "306": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "307": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "event_id#0",
        "event_string#0 (copy)"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%5#0",
        "event_string#0 (copy)"
      ]
    },
    "309": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "310": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\"",
        "encoded_tuple_buffer%6#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "\"events\""
      ]
    },
    "311": {
      "op": "dig 2",
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "313": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%6#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "box_prefixed_key%0#0"
      ]
    },
    "314": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_tuple_buffer%6#0",
        "event_id#0"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "315": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%6#0",
        "event_id#0",
        "{box_del}"
      ],
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "316": {
      "op": "pop",
      "stack_out": [
        "event_id#0",
        "encoded_tuple_buffer%6#0",
        "box_prefixed_key%0#0"
      ]
    },
    "317": {
      "op": "swap",
      "stack_out": [
        "event_id#0",
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "318": {
      "op": "box_put",
      "stack_out": [
        "event_id#0"
      ]
    },
    "319": {
      "retsub": true,
      "op": "retsub"
    },
    "320": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.instantaneous_payout",
      "params": {
        "recipient_address#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "instantaneous_payout",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "323": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "325": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "327": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "329": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "330": {
      "error": "Payment must be sent to contract",
      "op": "assert // Payment must be sent to contract",
      "stack_out": []
    },
    "331": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "333": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "335": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "337": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "338": {
      "error": "Payment sender must match transaction sender",
      "op": "assert // Payment sender must match transaction sender",
      "stack_out": []
    },
    "339": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "341": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "343": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "344": {
      "error": "Payment amount must be greater than 0",
      "op": "assert // Payment amount must be greater than 0",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "345": {
      "op": "itxn_begin"
    },
    "346": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient_address#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "recipient_address#0 (copy)"
      ]
    },
    "348": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "350": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "352": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "353": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "355": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "356": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "358": {
      "op": "itxn_submit"
    },
    "359": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "360": {
      "retsub": true,
      "op": "retsub"
    },
    "361": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.create_conditional_donation",
      "params": {
        "event_id#0": "bytes",
        "recipient_yes#0": "bytes",
        "recipient_no#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "create_conditional_donation",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "364": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\""
      ],
      "stack_out": [
        "\"events\""
      ]
    },
    "365": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "368": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "369": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "370": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "372": {
      "error": "Event does not exist",
      "op": "assert // Event does not exist",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "373": {
      "op": "box_get",
      "defined_out": [
        "event_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "event_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "374": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "event_struct#0"
      ]
    },
    "375": {
      "op": "intc_2 // 80",
      "defined_out": [
        "80",
        "event_struct#0"
      ],
      "stack_out": [
        "event_struct#0",
        "80"
      ]
    },
    "376": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0"
      ]
    },
    "377": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0",
        "0x00"
      ]
    },
    "378": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "379": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "381": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "0"
      ]
    },
    "383": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "384": {
      "error": "Event has already been resolved",
      "op": "assert // Event has already been resolved",
      "stack_out": []
    },
    "385": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "387": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "389": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "391": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "392": {
      "error": "Payment must be sent to contract",
      "op": "assert // Payment must be sent to contract",
      "stack_out": []
    },
    "393": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "395": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "397": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "399": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "400": {
      "error": "Payment sender must match transaction sender",
      "op": "assert // Payment sender must match transaction sender",
      "stack_out": []
    },
    "401": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "403": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "405": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "406": {
      "error": "Payment amount must be greater than 0",
      "op": "assert // Payment amount must be greater than 0",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "407": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "409": {
      "op": "sha256",
      "defined_out": [
        "sender_hash#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "sender_hash#0"
      ]
    },
    "410": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "sender_hash#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "sender_hash#0",
        "tmp%10#0"
      ]
    },
    "412": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%10#0",
        "sender_hash#0"
      ]
    },
    "413": {
      "op": "substring 0 8",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "416": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "417": {
      "op": "+",
      "defined_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "418": {
      "op": "itob",
      "defined_out": [
        "clause_id#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "clause_id#0"
      ]
    },
    "419": {
      "op": "swap",
      "stack_out": [
        "clause_id#0",
        "tmp%7#0"
      ]
    },
    "420": {
      "op": "itob",
      "defined_out": [
        "clause_id#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "clause_id#0",
        "val_as_bytes%1#0"
      ]
    },
    "421": {
      "op": "txn Sender",
      "defined_out": [
        "clause_id#0",
        "tmp%13#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "clause_id#0",
        "val_as_bytes%1#0",
        "tmp%13#0"
      ]
    },
    "423": {
      "op": "dig 2",
      "defined_out": [
        "clause_id#0",
        "clause_id#0 (copy)",
        "tmp%13#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "clause_id#0",
        "val_as_bytes%1#0",
        "tmp%13#0",
        "clause_id#0 (copy)"
      ]
    },
    "425": {
      "op": "frame_dig -4",
      "stack_out": [
        "clause_id#0",
        "val_as_bytes%1#0",
        "tmp%13#0",
        "clause_id#0 (copy)",
        "event_id#0 (copy)"
      ]
    },
    "427": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%2#0",
        "tmp%13#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "clause_id#0",
        "val_as_bytes%1#0",
        "tmp%13#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "428": {
      "op": "uncover 2",
      "stack_out": [
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "430": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "431": {
      "op": "frame_dig -3",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%3#0",
        "recipient_yes#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%3#0",
        "recipient_yes#0 (copy)"
      ]
    },
    "433": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%4#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "434": {
      "op": "frame_dig -2",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%4#0",
        "recipient_no#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%4#0",
        "recipient_no#0 (copy)"
      ]
    },
    "436": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%5#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "clause_id#0",
        "tmp%13#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "437": {
      "op": "swap",
      "stack_out": [
        "clause_id#0",
        "encoded_tuple_buffer%5#0",
        "tmp%13#0"
      ]
    },
    "438": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "clause_id#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "439": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "clause_id#0",
        "encoded_tuple_buffer%6#0",
        "0x00"
      ]
    },
    "440": {
      "op": "concat",
      "defined_out": [
        "clause_id#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "clause_id#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "441": {
      "op": "bytec_3 // \"clauses\"",
      "defined_out": [
        "\"clauses\"",
        "clause_id#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "clause_id#0",
        "encoded_tuple_buffer%7#0",
        "\"clauses\""
      ]
    },
    "442": {
      "op": "dig 2",
      "stack_out": [
        "clause_id#0",
        "encoded_tuple_buffer%7#0",
        "\"clauses\"",
        "clause_id#0 (copy)"
      ]
    },
    "444": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0",
        "clause_id#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "clause_id#0",
        "encoded_tuple_buffer%7#0",
        "box_prefixed_key%2#0"
      ]
    },
    "445": {
      "op": "swap",
      "stack_out": [
        "clause_id#0",
        "box_prefixed_key%2#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "446": {
      "op": "box_put",
      "stack_out": [
        "clause_id#0"
      ]
    },
    "447": {
      "retsub": true,
      "op": "retsub"
    },
    "448": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.resolve_event",
      "params": {
        "event_id#0": "bytes",
        "resolution#0": "bytes"
      },
      "block": "resolve_event",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "451": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\""
      ],
      "stack_out": [
        "\"events\""
      ]
    },
    "452": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "454": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "455": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "456": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "457": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "459": {
      "error": "Event does not exist",
      "op": "assert // Event does not exist",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "460": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "461": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "462": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "463": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ]
    },
    "464": {
      "op": "intc_2 // 80",
      "defined_out": [
        "80",
        "box_prefixed_key%0#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "event_struct#0 (copy)",
        "80"
      ]
    },
    "465": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0"
      ]
    },
    "466": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "467": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "468": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "470": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_bool%0#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "encoded_bool%0#0"
      ]
    },
    "471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "472": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%0#0"
      ]
    },
    "473": {
      "error": "Event has already been resolved",
      "op": "assert // Event has already been resolved",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "474": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%1#0"
      ]
    },
    "476": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%1#0",
        "event_struct#0 (copy)"
      ]
    },
    "478": {
      "error": "Index access is out of bounds",
      "op": "extract 11 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%1#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "481": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "tmp%2#0"
      ]
    },
    "482": {
      "error": "Only authorized oracle can resolve event",
      "op": "assert // Only authorized oracle can resolve event",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "483": {
      "op": "intc_2 // 80",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "80"
      ]
    },
    "484": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "80",
        "0"
      ]
    },
    "485": {
      "op": "setbit",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "486": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "resolution#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "resolution#0 (copy)"
      ]
    },
    "488": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "resolution#0 (copy)",
        "0"
      ]
    },
    "489": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%2#0"
      ]
    },
    "490": {
      "op": "intc_3 // 81"
    },
    "491": {
      "op": "swap",
      "defined_out": [
        "81",
        "box_prefixed_key%0#0",
        "event_struct#0",
        "is_true%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "81",
        "is_true%2#0"
      ]
    },
    "492": {
      "op": "setbit",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "493": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "495": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0",
        "{box_del}"
      ]
    },
    "496": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "event_struct#0"
      ]
    },
    "497": {
      "op": "box_put",
      "stack_out": []
    },
    "498": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "499": {
      "retsub": true,
      "op": "retsub"
    },
    "500": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.execute_conditional_clause",
      "params": {
        "clause_id#0": "bytes"
      },
      "block": "execute_conditional_clause",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "503": {
      "op": "bytec_3 // \"clauses\"",
      "defined_out": [
        "\"clauses\""
      ],
      "stack_out": [
        "\"clauses\""
      ]
    },
    "504": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"clauses\"",
        "clause_id#0 (copy)"
      ],
      "stack_out": [
        "\"clauses\"",
        "clause_id#0 (copy)"
      ]
    },
    "506": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "507": {
      "op": "dupn 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "509": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "510": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "512": {
      "error": "Clause does not exist",
      "op": "assert // Clause does not exist",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "513": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "514": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "clause_struct#0"
      ]
    },
    "515": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ]
    },
    "516": {
      "op": "uncover 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "518": {
      "error": "check self.conditional_clauses entry exists",
      "op": "assert // check self.conditional_clauses entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "519": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ]
    },
    "520": {
      "op": "pushint 960 // 960",
      "defined_out": [
        "960",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "clause_struct#0 (copy)",
        "960"
      ]
    },
    "523": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "is_true%0#0"
      ]
    },
    "524": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "525": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "526": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "528": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "encoded_bool%0#0"
      ]
    },
    "529": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "530": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "tmp%0#0"
      ]
    },
    "531": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "tmp%1#0"
      ]
    },
    "532": {
      "error": "Clause has already been executed",
      "op": "assert // Clause has already been executed",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "533": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "materialized_values%0#0"
      ]
    },
    "536": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\"",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "materialized_values%0#0",
        "\"events\""
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "\"events\"",
        "materialized_values%0#0"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%2#0",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "539": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)"
      ]
    },
    "540": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%2#0",
        "clause_struct#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0",
        "_%1#0",
        "maybe_exists%2#0"
      ]
    },
    "541": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0",
        "maybe_exists%2#0"
      ]
    },
    "543": {
      "error": "Associated event does not exist",
      "op": "assert // Associated event does not exist",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%2#0"
      ]
    },
    "544": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "maybe_exists%3#0"
      ]
    },
    "545": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0"
      ]
    },
    "546": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ]
    },
    "547": {
      "op": "intc_2 // 80",
      "defined_out": [
        "80",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "event_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "event_struct#0 (copy)",
        "80"
      ]
    },
    "548": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "is_true%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "is_true%1#0"
      ]
    },
    "549": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "is_true%1#0",
        "0x00"
      ]
    },
    "550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "551": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "553": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%1#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "encoded_bool%1#0"
      ]
    },
    "554": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "555": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "tmp%2#0"
      ]
    },
    "556": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "tmp%3#0"
      ]
    },
    "557": {
      "error": "Event has not been resolved yet",
      "op": "assert // Event has not been resolved yet",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0"
      ]
    },
    "558": {
      "op": "intc_3 // 81",
      "defined_out": [
        "81",
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "event_struct#0",
        "81"
      ]
    },
    "559": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%2#0"
      ]
    },
    "560": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%2#0",
        "0x00"
      ]
    },
    "561": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "is_true%2#0",
        "0x00",
        "0"
      ]
    },
    "562": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "0x00",
        "0",
        "is_true%2#0"
      ]
    },
    "564": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%2#0"
      ]
    },
    "565": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "encoded_bool%2#0",
        "0"
      ]
    },
    "566": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "tmp%4#0"
      ]
    },
    "567": {
      "op": "bz execute_conditional_clause_else_body@2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ]
    },
    "570": {
      "op": "frame_dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "572": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0"
      ]
    },
    "575": {
      "block": "execute_conditional_clause_after_if_else@3",
      "stack_in": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0"
      ],
      "op": "itxn_begin"
    },
    "576": {
      "op": "frame_dig 1",
      "defined_out": [
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0",
        "clause_struct#0"
      ]
    },
    "578": {
      "op": "dup",
      "defined_out": [
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ]
    },
    "579": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "clause_struct#0",
        "clause_struct#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0",
        "clause_struct#0",
        "clause_struct#0 (copy)",
        "16"
      ]
    },
    "581": {
      "op": "extract_uint64",
      "defined_out": [
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0",
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "582": {
      "op": "uncover 2",
      "defined_out": [
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "recipient#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "recipient#0"
      ]
    },
    "584": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "586": {
      "op": "itxn_field Amount",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "588": {
      "op": "intc_1 // pay",
      "defined_out": [
        "clause_struct#0",
        "pay"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "pay"
      ]
    },
    "589": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "591": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "0"
      ]
    },
    "592": {
      "op": "itxn_field Fee",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "594": {
      "op": "itxn_submit"
    },
    "595": {
      "op": "pushint 960 // 960",
      "defined_out": [
        "960",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "960"
      ]
    },
    "598": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "960",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "960",
        "1"
      ]
    },
    "599": {
      "op": "setbit",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "600": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0",
        "box_prefixed_key%0#0"
      ]
    },
    "602": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ]
    },
    "603": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ]
    },
    "604": {
      "op": "intc_1 // 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "1"
      ]
    },
    "605": {
      "op": "frame_bury 0"
    },
    "607": {
      "retsub": true,
      "op": "retsub"
    },
    "608": {
      "block": "execute_conditional_clause_else_body@2",
      "stack_in": [
        "box_prefixed_key%0#0",
        "clause_struct#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "clause_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "clause_struct#0"
      ]
    },
    "610": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "clause_struct#0",
        "recipient#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "clause_struct#0",
        "recipient#0"
      ]
    },
    "613": {
      "op": "b execute_conditional_clause_after_if_else@3"
    },
    "616": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_event_info",
      "params": {
        "event_id#0": "bytes"
      },
      "block": "get_event_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "619": {
      "op": "bytec_2 // \"events\"",
      "defined_out": [
        "\"events\""
      ],
      "stack_out": [
        "\"events\""
      ]
    },
    "620": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ],
      "stack_out": [
        "\"events\"",
        "event_id#0 (copy)"
      ]
    },
    "622": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "623": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "624": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "625": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "627": {
      "error": "Event does not exist",
      "op": "assert // Event does not exist",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "628": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "629": {
      "error": "check self.listed_events entry exists",
      "op": "assert // check self.listed_events entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "630": {
      "retsub": true,
      "op": "retsub"
    },
    "631": {
      "subroutine": "smart_contracts.responsive_donation.contract.ResponsiveDonation.get_clause_info",
      "params": {
        "clause_id#0": "bytes"
      },
      "block": "get_clause_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "634": {
      "op": "bytec_3 // \"clauses\"",
      "defined_out": [
        "\"clauses\""
      ],
      "stack_out": [
        "\"clauses\""
      ]
    },
    "635": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"clauses\"",
        "clause_id#0 (copy)"
      ],
      "stack_out": [
        "\"clauses\"",
        "clause_id#0 (copy)"
      ]
    },
    "637": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "638": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "639": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "640": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "642": {
      "error": "Clause does not exist",
      "op": "assert // Clause does not exist",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "643": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "644": {
      "error": "check self.conditional_clauses entry exists",
      "op": "assert // check self.conditional_clauses entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "645": {
      "retsub": true,
      "op": "retsub"
    }
  }
}